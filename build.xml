<?xml version="1.0" encoding="UTF-8"?>

<project name="phing-drupal" default="build" basedir=".">

  <target name="lint-php"
          description="Check all PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint>
      <fileset refid="src.php" />
    </phplint>
  </target>

  <target name="lint-php-custom"
          description="Check custom PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint>
      <fileset refid="src.php.custom" />
    </phplint>
  </target>

  <target name="lint-js"
          description="Check all Javascript files using JSlint"
          depends="init">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js"/>
    </foreach>
  </target>

  <target name="lint-js-custom"
          description="Check custom Javascript files using JSlint"
          depends="init">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
  </target>

  <target name="lint-css"
          description="Check all CSS files using JSlint"
          depends="init">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css"/>
    </foreach>
  </target>

  <target name="lint-css-custom"
          description="Check custom CSS files using JSlint"
          depends="init">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css.custom"/>
    </foreach>
  </target>

  <!-- Common target for running jslint on a file -->
  <target name="jslint-file"
          depends="init">
    <property name="jslint4java.dir" value="${project.toolsdir}/jslint4java"/>
    <php function="basename" returnProperty="jslint4java.basename">
      <param value="${jslint4java.url}" />
      <!-- Assume that the version of jslint4java used is a distribution
           where the filename ends in -dist.zip. -->
      <param value="-dist.zip" />
    </php>

    <if>
      <not><available file="${project.toolsdir}/jslint4java" /></not>
      <then>
        <!-- Download and unpack jslint4java -->
        <mkdir dir="${jslint4java.dir}" />
        <php function="basename" returnProperty="jslint4java.zipfile">
          <param value="${jslint4java.url}" />
        </php>

        <httpget url="${jslint4java.url}"
                 dir="${jslint4java.dir}"/>
        <unzip file="${jslint4java.dir}/${jslint4java.zipfile}" todir="${jslint4java.dir}" />
      </then>
    </if>

    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/jslint"/>
      <property name="repo.url" value="${jslint.repository}" />
    </phingcall>

    <exec command="java -jar ${jslint4java.dir}/${jslint4java.basename}/${jslint4java.basename}.jar --jslint ${project.toolsdir}/jslint/${jslint.file} --report checkstyle ${absfilename}" outputProperty="report"/>
    <!-- Replace / with - in path to create legal filenames -->
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/"/>
      <param value="-"/>
      <param value="${filename}"/>
    </php>
    <delete file="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
    <append text="${report}" destFile="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
  </target>

  <target name="check-php-debug"
          description="Check custom PHP code for debug statements"
          depends="init">
    <property name="php.debugfile" value="${project.logdir}/debug_php.txt" />
    <delete file="${php.debugfile}"/>
    <append text="" destFile="${php.debugfile}"/>
    <foreach target="check-php-debug-file" param="filename" absparam="absfilename">
      <fileset refid="src.php.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${php.debugfile}" />
    <!-- Break if debug code is detected -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="PHP debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from check-php-debug. -->
  <target name="check-php-debug-file"
          depends="init">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(var_dump\(|dsm\(|dpm\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.logdir}/debug_php.txt"/>
      </then>
    </if>
  </target>

  <target name="check-js-debug"
          description="Check custom Javascript code for debug statements"
          depends="init">
    <property name="js.debugfile" value="${project.logdir}/debug_js.txt" />
    <delete file="${js.debugfile}"/>
    <append text="" destFile="${js.debugfile}"/>
    <foreach target="check-js-debug-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${js.debugfile}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="Javascript debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from check-js-debug. -->
  <target name="check-js-debug-file"
          depends="init">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(console\.log\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.logdir}/debug_js.txt"/>
      </then>
    </if>
  </target>

  <target name="phpunit"
          description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
    <!-- Disable code coverage. Often Xdebug is not available
         TODO: Add build property to enable xdebug/codecoverage-->
    <!--<phpunit codecoverage="true">-->
    <phpunit>
      <formatter type="xml" />
    </phpunit>
  </target>

  <!-- PHP Depend is of little value to most Drupal projects since they use little PHP -->
  <target name="pdepend"
          description="Generate jdepend.xml and software metrics charts using PHP_Depend"
          depends="init">
    <mkdir dir="${project.buildir}/pdepend" />
    <phpdepend>
      <fileset refid="src.php.custom" />
      <logger type="jdepend-xml" outfile="${project.logdir}/jdepend.xml"/>
      <logger type="jdepend-chart" outfile="${project.buildir}/pdepend/dependencies.svg"/>
      <logger type="overview-pyramid" outfile="${project.buildir}/pdepend/overview-pyramid.svg"/>
    </phpdepend>
  </target>

  <target name="phpmd"
          description="Generate pmd.xml using PHPMD"
          depends="init">
    <phpmd rulesets="codesize,naming,design">
      <!-- We do not use the unusedcode ruleset as Drupal hook implementations usually
           are declared with all arguements but may not use them all. -->
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="${project.logdir}/pmd.xml"/>
    </phpmd>
  </target>

  <target name="phpcpd"
          description="Generate pmd-cpd.xml using PHPCPD"
          depends="init">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="${project.logdir}/pmd-cpd.xml"/>
    </phpcpd>
  </target>

  <target name="phploc"
          description="Generate phploc.csv using PHPLOC"
          depends="init, setup-phing-phploc">
    <tstamp>
      <format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
    </tstamp>
    <phploc reportType="csv"
            reportName="phploc"
            reportDirectory="${project.logdir}" countTests="true">
      <fileset refid="src.php.custom" />
    </phploc>
  </target>

  <!-- There is no Phing task for PHP Codesniffer in v2.4.6. It's coming for v2.5.
       Execute while we wait. -->
  <target name="phpcs"
          description="Generate checkstyle.xml using PHP_CodeSniffer"
          depends="init">
    <phingcall target="setupgitrepo">
      <property name="repo.dir" value="${project.toolsdir}/drupalcs"/>
      <property name="repo.url" value="${phpcs.drupalcs.repository}" />
    </phingcall>
    <exec command="phpcs --report=checkstyle
                         --report-file=${project.logdir}/checkstyle-codesniffer.xml
                         --standard=${project.toolsdir}/drupalcs/ruleset.xml
                         --extensions=php,inc
                         --ignore=*/contrib/*,*/*.features.*,*/*.layout.*,*/*.pages_default.*,*/*strongarm.inc
                         ${project.sitesdir}"
          logoutput="true" />
  </target>

  <target name="site-install"
          depends="init, setup-phing-drush">
    <drush command="site-install" assume="yes">
      <option name="db-url">${db.url}</option>
      <param>${drupal.profile}</param>
    </drush>
  </target>

  <target name="coder-review-d6"
          description="Review code using Drupal 6 Coder module"
          depends="init">
    <echo level="warning">Coder Review not support for Drupal 6 yet. Check http://drupal.org/node/858330 for patches/updates.</echo>
    <!--<phingcall target="coder-review">
      <property name="coder.version" value="6.x-2.0-rc1"/>
      <property name="coder.patch.url" value=""/>
      <property name="coder.patch.dir" value="${project.sitesdir}/modules/contrib/coder"/>
      <property name="coder.drush.command" value="coder"/>
    </phingcall>-->
  </target>

  <target name="coder-review-d7"
          description="Review code using Drupal 7 Coder module"
          depends="init">
    <phingcall target="coder-review">
      <property name="coder.version" value="7.x-1.x-dev"/>
      <property name="coder.patch.url" value="http://86.58.184.143/coder-review-checkstyle-xml-fix.patch"/>
      <property name="coder.patch.dir" value="${project.sitesdir}/modules/contrib/coder/coder_review"/>
      <property name="coder.drush.command" value="coder_review"/>
    </phingcall>
  </target>

  <!-- The actual task for performing code reviews.
       Requires properties set by calling tasks coder-review-d6 or coder-review-d7 -->
  <target name="coder-review"
          depends="init, clean, setup-phing-drush, site-install">
    <drush command="pm-download" assume="yes">
      <!-- Currently only dev versions of Coder supports returning code review
           results in Checkstyle XML format -->
      <param>coder-${coder.version}</param>
    </drush>

    <!-- Patch Coder module to add support for piping review output.
         This is needed as there is no other way to grab the result and
         write it to a file. -->
    <httpget url="${coder.patch.url}"
             dir="${coder.patch.dir}"/>
    <php function="basename" returnProperty="coder.patch.file">
      <param value="${coder.patch.url}"/>
    </php>
    <patch patchfile="${coder.patch.dir}/${coder.patch.file}"
           dir="${coder.patch.dir}"
           haltonfailure="true" />

    <drush command="pm-enable" assume="yes">
      <param>${coder.drush.command}</param>
    </drush>

    <!-- Get a list of modules and themes matching the project prefix.
         These are the ones we are going to review. -->
    <drush command="pm-list" pipe="projects" />
    <!-- The project list is piped through a file as this seems to be
         the only way to handle filtering of values in Phing. -->
    <delete file="${project.basedir}/build/logs/projects.txt" />
    <append text="${projects}" destFile="${project.logdir}/projects.txt" />
    <loadfile property="projects" file="${project.logdir}/projects.txt">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="^${project.code.prefix}_" />
        </linecontainsregexp>
        <!-- Prefix all lines with a space.
             We need the space as separator when we strip line breaks -->
        <prefixlines prefix=" " />
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <drush command="coder-review" assume="yes" pipe="xml">
      <param>no-empty</param>
      <param>xml</param>
      <param>minor</param>
      <param>comment</param>
      <param>i18n</param>
      <param>security</param>
      <param>sql</param>
      <param>style</param>
      <param>style</param>
      <!-- Review all the modules and themes matching the project prefix -->
      <param>${projects}</param>
      <!-- Review additional modules which do not match the prefix -->
      <param>${project.code.custom}</param>
    </drush>
    <property name="coderreview.checkstyle.file"  value="${project.logdir}/checkstyle.xml" />
    <delete file="${coderreview.checkstyle.file}" />
    <append destFile="${coderreview.checkstyle.file}" text="${xml}" />
    <!-- Modify Coder Review XML output to match CheckStyle XML report format
         Convert root element from coderreview to checkstyle
         Convert severities from Drupal minor/normal/critical to CheckStyle info/warning/error
         Convert source from source extract to Category.Type format
         This could probably be handled better using an XSLT. Use string replacement for now.
         Filter chains does not seem to work in append so we load the file again.-->
    <reflexive file="${coderreview.checkstyle.file}">
      <filterchain>
        <replaceregexp>
          <regexp pattern="coderreview" replace="checkstyle" />
          <regexp pattern='severity="minor"' replace='severity="info"' />
          <regexp pattern='severity="normal"' replace='severity="warning"' />
          <regexp pattern='severity="critical"' replace='severity="error"' />
          <regexp pattern='source=".*"' replace='source="Drupal.CoderReview"' />
        </replaceregexp>
      </filterchain>
    </reflexive>
  </target>

  <target name="simpletest"
          description="Run all unit tests"
          depends="init, clean, setup-phing-drush, site-install">
    <drush command="pm-enable" assume="yes">
      <param>simpletest</param>
    </drush>
    <drush command="test-run" assume="yes">
      <option name="all" />
      <!-- XML output requires a drush 4.5 or this patch http://drupal.org/node/1109408 -->
      <option name="xml">${project.testdir}/tests</option>
    </drush>
  </target>

  <target name="phpdoc"
          description="Generate API documentation using PHPDocumentor">
    <mkdir dir="${project.buildir/api"/>
    <phpdoc title="API Documentation"
            destdir="${project.builddir}/api"
            sourcecode="php"
            output="HTML:Smarty:PHP">
      <fileset refid="src.php" />
    </phpdoc>
  </target>

  <!-- There is no Phing task for PHP CodeBrowser so do a plain execute -->
  <target name="phpcb"
          description="Aggregate tool output with PHP_CodeBrowser"
          depends="init">
    <mkdir dir="${project.basedir}/build/code-browser"/>
    <exec command="phpcb  --log ${project.logdir}
                          --source ${project.basedir}
                          --output ${project.builddir}/code-browser"
          logoutput="true" />
  </target>

  <!-- This target sets up many of the common resources used throughout the build.
       All other targets except dependencies for this target should depend on this. -->
  <target name="init"
          depends="load-properties"
          unless="project.initialized">
    <!-- By default Jenkins runs Phing from the directory containing build.xml.
         If build.xml is located in a subdirectory - e.g. when using Phing Drupal as
         a submodule - we need to reset the project basedir and reload properties.
         NB: This only works if the subdirectory is directly within the Drupal
             root directory. -->
    <if>
      <!-- If cron.php exists then assume we have a Drupal root directory -->
      <available file="${project.basedir}/../cron.php"/>
      <then>
        <property name="project.basedir" value="${project.basedir}/../" override="true"/>
        <resolvepath propertyName="project.basedir" file="${project.basedir}"/>
        <phingcall target="load-properties">
          <property name="project.properties.initialized" value="false" />
        </phingcall>
      </then>
    </if>

    <!-- Define working directories -->
    <property name="project.sitesdir" value="${project.basedir}/${project.code.dir}" />
    <property name="project.builddir" value="${project.basedir}/build" />
    <property name="project.toolsdir" value="${project.builddir}/tools" />
    <property name="project.coveragedir" value="${project.builddir}/coverage" />
    <property name="project.logdir" value="${project.builddir}/logs" />
    <property name="project.testdir" value="${project.builddir}/tests" />

    <!-- Define pattern sets for future reference -->
    <patternset id="php">
      <include name="**/*.php" />
      <include name="**/*.module" />
      <include name="**/*.install" />
      <include name="**/*.profile" />
      <include name="**/*.inc" />
    </patternset>

    <patternset id="js">
      <include name="**/*.js" />
      <exclude name="**/*.min.js" />
    </patternset>

    <patternset id="css">
      <include name="**/*.css" />
    </patternset>

    <patternset id="contrib">
      <exclude name="**/contrib/**/*.*" />
      <exclude name="**/libraries/**/*.*" />
    </patternset>

    <patternset id="generated">
      <exclude name="**/*.features.*" />
      <exclude name="**/*.layouts.inc" />
      <exclude name="**/*.pages_default.inc" />
      <exclude name="**/*.strongarm.inc" />
    </patternset>

    <!-- Define file sets for future reference -->
    <fileset  id="src.php" dir="${project.basedir}">
      <include name="**/*.php" />
      <include name="**/*.inc" />
    </fileset>

    <fileset dir="${project.sitesdir}" id="src.php.custom">
      <patternset refid="php"/>
      <patternset refid="contrib"/>
      <patternset refid="generated"/>
    </fileset>

    <fileset dir="${project.basedir}" id="src.js">
      <patternset refid="js" />
    </fileset>

    <fileset dir="${project.sitesdir}" id="src.css.custom">
      <patternset refid="css" />
      <patternset refid="contrib" />
    </fileset>

    <fileset dir="${project.basedir}" id="src.css">
      <patternset refid="css" />
    </fileset>

    <fileset dir="${project.sitesdir}" id="src.js.custom">
      <patternset refid="js" />
      <patternset refid="contrib" />
    </fileset>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

  <target name="clean"
          description="Clean up and create artifact directories"
          depends="init">
    <!-- Do not delete builddir. It may contain the build.xml file -->
    <mkdir dir="${project.toolsdir}"/>
    <mkdir dir="${project.coveragedir}"/>
    <mkdir dir="${project.logdir}"/>
    <mkdir dir="${project.testdir}"/>
    <delete dir="${project.basedir}/database.sqlite"/>
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>

    <mkdir dir="${project.toolsdir}"/>
    <mkdir dir="${project.coveragedir}"/>
    <mkdir dir="${project.logdir}"/>
    <mkdir dir="${project.testdir}"/>
  </target>

  <!-- Helper taks to load properties -->
  <target name="load-properties">
    <!-- Use condition instead of unless property as we cannot unset properties
         in Phing -->
    <if>
      <not><equals arg1="${project.properties.loaded}" arg2="true"/></not>
      <then>
        <!-- By default use default properties -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Allow override using build.properties in build.xml dir -->
        <php function="dirname" returnProperty="phing.dir">
          <param value="${phing.file}"/>
        </php>
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using build.properties in project basedir -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the properties.
             Override in case load properties are called multiple times. -->
        <property file="${project.properties.file}" override="true" />
        <echo>Loaded properties file ${project.properties.file}</echo>

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

  <!-- Helper task to clone a git repository if it does not exist already -->
  <target name="setup-git-repo">
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <mkdir dir="${repo.dir}" />
        <!-- The gitclone task does not seem to work. Use exec instead -->
        <exec command="git clone ${repo.url} ${repo.dir}" logoutput="true" />
      </then>
    </if>
  </target>

  <!-- Helper task to setup Phing PHPLoc integration -->
  <target name="setup-phing-phploc"
          description="Generate phploc.csv using PHPLOC"
          depends="init" >
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/phing-phploc"/>
      <property name="repo.url" value="${phing.phploc.repository}" />
    </phingcall>
    <taskdef name="phploc" classname="PHPLocTask" classpath="${project.toolsdir}/phing-phploc" />
  </target>

  <!-- Helper task to setup Phing Drush integration -->
  <target name="setup-phing-drush"
          depends="init" >
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/phing-drush"/>
      <property name="repo.url" value="${phing.drush.repository}" />
    </phingcall>
    <taskdef name="drush" classname="DrushTask" classpath="${project.toolsdir}/phing-drush" />
  </target>

  <!-- Main targets -->
  <target name="verify" depends="init,
                                 clean,
                                 lint-php-custom,
                                 lint-js-custom,
                                 lint-css-custom,
                                 check-php-debug,
                                 check-js-debug" />
                                 <!-- No simpletest for now until we figure out how to speed
                                      up tests and/or only run for custom code -->
                                 <!-- simpletest"/>-->

  <target name="analyze" depends="init,
                                  clean,
                                  phpmd,
                                  phpcpd,
                                  phploc">
    <!-- Moved inside target to support properties in target name -->
    <phingcall target="coder-review-d${drupal.version}" />
  </target>

  <target name="build" depends="init,
                                clean,
                                verify,
                                analyze" />
                                <!-- No documentation and code browser generation for now.
                                     The processes eat up memory and build time and are largely
                                     obsolete when using GitHub -->
                                <!-- phpdoc,
                                     phpcb"/> -->

</project>