<?xml version="1.0" encoding="UTF-8"?>

<project name="name-of-project" default="build" basedir=".">
  <!-- Set the version of Drupal for the project - 6 or 7 -->
  <property name="drupal.version" value="7" />
  <!-- Set the database url to use for site installs -->
  <property name="db.url" value="sqlite:${project.basedir}/database.sqlite" />
  <!-- Set the prefix for modules with a common prefix developed for the site -->
  <property name="projects.prefix" value="cast" />
  <!-- Set the prefix for other modules and themes developed for the site -->
  <property name="projects.custom" value="troupe " />

  <!-- Set the value to the repository to clone for Phing PHPLoc task -->
  <property name="phing.phploc.repository" value="https://github.com/raphaelstolt/phploc-phing.git" />
  <!-- Set the value to the repository to clone for Phing Drush task -->
  <property name="phing.drush.repository" value="http://git.drupal.org/sandbox/mongolito404/1157574.git" />
  <!-- Set the value to the repository to clone for PHP CodeSniffer coding standards task 
       NB: This is only required if using the phpcs target / PHP_Codesniffer -->
  <property name="phpcs.drupalcs.repository" value="https://github.com/ericduran/drupalcs.git" />

  <!-- Define working directories -->
  <property name="project.sitesdir" value="${project.basedir}/sites/all" />
  <property name="project.builddir" value="${project.basedir}/build" />
  <property name="project.codedir" value="${project.builddir}/code" />
  <property name="project.coveragedir" value="${project.builddir}/coverage" />
  <property name="project.logdir" value="${project.builddir}/logs" />
  <property name="project.testdir" value="${project.builddir}/tests" />

  <!-- Define pattern sets for future reference -->
  <patternset id="php">
    <include name="**/*.php" />
    <include name="**/*.module" />
    <include name="**/*.install" />
    <include name="**/*.profile" />
    <include name="**/*.inc" />
  </patternset>

  <patternset id="js">
    <include name="**/*.js" />
    <exclude name="**/*.min.js" />  
  </patternset>

  <patternset id="css">
    <include name="**/*.css" />
  </patternset>

  <patternset id="contrib">
    <exclude name="**/contrib/**/*.*" />
    <exclude name="**/libraries/**/*.*" />
  </patternset>

  <patternset id="generated">
    <exclude name="**/*.features.*" />
    <exclude name="**/*.layouts.inc" />
    <exclude name="**/*.pages_default.inc" />
    <exclude name="**/*.strongarm.inc" />
  </patternset>

  <!-- Define file sets for future reference -->
  <fileset  id="src.php" dir="${project.basedir}">
    <include name="**/*.php" />
    <include name="**/*.inc" />
  </fileset>

  <fileset dir="${project.sitesdir}" id="src.php.custom">
    <patternset refid="php"/>
    <patternset refid="contrib"/>
    <patternset refid="generated"/>
  </fileset>
  
  <fileset dir="${project.basedir}" id="src.js">
    <patternset refid="js" />
  </fileset>

  <fileset dir="${project.sitesdir}" id="src.css.custom">
    <patternset refid="css" />
    <patternset refid="contrib" />
  </fileset>
  
  <fileset dir="${project.basedir}" id="src.css">
    <patternset refid="css" />
  </fileset>

  <fileset dir="${project.sitesdir}" id="src.js.custom">
    <patternset refid="js" />
    <patternset refid="contrib" />
  </fileset>

  <target name="clean"
          description="Clean up and create artifact directories">
    <delete dir="${project.basedir}/build"/>
    <delete dir="${project.basedir}/database.sqlite"/>
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>

    <mkdir dir="${project.builddir}"/>
    <mkdir dir="${project.codedir}"/>
    <mkdir dir="${project.coveragedir}"/>
    <mkdir dir="${project.logdir}"/>
    <mkdir dir="${project.testdir}"/>
  </target>

  <target name="lint-php"
          description="Check all PHP files for syntax errors using PHPLint">
    <phplint>
      <fileset refid="src.php" />
    </phplint>
  </target>

  <target name="lint-php-custom"
          description="Check custom PHP files for syntax errors using PHPLint">
    <phplint>
      <fileset refid="src.php.custom" />
    </phplint>
  </target>

  <target name="lint-js"
          description="Check all Javascript files using JSlint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js"/>
    </foreach>
  </target>

  <target name="lint-js-custom"
          description="Check custom Javascript files using JSlint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
  </target>

  <target name="lint-css"
          description="Check all CSS files using JSlint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css"/>
    </foreach>
  </target>

  <target name="lint-css-custom"
          description="Check custom CSS files using JSlint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css.custom"/>
    </foreach>
  </target>

  <target name="jslint-file">
    <property name="jslint4java.dir" value="${project.codedir}/jslint4java"/>
    <if>
      <not><available file="${project.codedir}/jslint4java" /></not>
      <then>
        <!-- Download and unpack jslint4java -->
        <mkdir dir="${jslint4java.dir}" />
        <httpget url="http://jslint4java.googlecode.com/files/jslint4java-2.0.0-dist.zip" 
                 dir="${jslint4java.dir}"/>
        <unzip file="${jslint4java.dir}/jslint4java-2.0.0-dist.zip" todir="${jslint4java.dir}" />
      </then>
    </if>
    
    <!-- Use jslintÂ´ instead - it is a bit more reasonable -->
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.codedir}/jslint"/>
      <property name="repo.url" value="https://github.com/mikewest/JSLint" />
    </phingcall>

    <exec command="java -jar ${project.codedir}/jslint4java/jslint4java-2.0.0/jslint4java-2.0.0.jar --jslint ${project.codedir}/jslint/fulljslint.js --report checkstyle ${absfilename}" outputProperty="report"/>
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/"/>
      <param value="-"/>
      <param value="${filename}"/>
    </php>
    <append text="${report}" destFile="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
  </target>

  <target name="check-php-debug"
          description="Check custom PHP code for debug statements">
    <property name="php.debugfile" value="${project.logdir}/debug_php.txt" />
    <delete file="${php.debugfile}"/>
    <append text="" destFile="${php.debugfile}"/>
    <foreach target="check-php-debug-file" param="filename" absparam="absfilename">
      <fileset refid="src.php.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${php.debugfile}" />
    <!-- Break if debug code is detected -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="PHP debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from checkdebugphp. -->
  <target name="check-php-debug-file">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(var_dump\(|dsm\(|dpm\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.logdir}/debug_php.txt"/>
      </then>
    </if>
  </target>

  <target name="check-js-debug"
          description="Check custom Javascript code for debug statements">
    <property name="js.debugfile" value="${project.logdir}/debug_js.txt" />
    <delete file="${js.debugfile}"/>
    <append text="" destFile="${js.debugfile}"/>
    <foreach target="check-js-debug-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${js.debugfile}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="Javascript debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from checkdebugjs. -->
  <target name="check-js-debug-file">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(console\.log\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.logdir}/debug_js.txt"/>
      </then>
    </if>
  </target>

  <target name="phpunit"
          description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
    <!--<phpunit codecoverage="true">-->
    <phpunit>
      <formatter type="xml" />
    </phpunit>
  </target>
  
  <!-- PHP Depend is of little value to most Drupal projects since they use little PHP -->
  <target name="pdepend"
          description="Generate jdepend.xml and software metrics charts using PHP_Depend">
    <mkdir dir="${project.buildir}/pdepend" />
    <phpdepend>
      <fileset refid="src.php.custom" />
      <logger type="jdepend-xml" outfile="${project.logdir}/jdepend.xml"/>
      <logger type="jdepend-chart" outfile="${project.buildir}/pdepend/dependencies.svg"/>
      <logger type="overview-pyramid" outfile="${project.buildir}/pdepend/overview-pyramid.svg"/>
    </phpdepend>
  </target>

  <target name="phpmd"
          description="Generate pmd.xml using PHPMD">
    <phpmd rulesets="codesize,naming,design">
      <!-- We do not use the unusedcode ruleset as Drupal hook implementations usually
           are declared with all arguements but may not use them all. -->
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="${project.logdir}/pmd.xml"/>
    </phpmd>
  </target>

  <target name="phpcpd"
          description="Generate pmd-cpd.xml using PHPCPD">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="${project.logdir}/pmd-cpd.xml"/>
    </phpcpd>
  </target>
  
  <target name="phploc"
          description="Generate phploc.csv using PHPLOC"
          depends="setup-phing-phploc">
    <tstamp>
      <format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
    </tstamp>
    <phploc reportType="csv" 
            reportName="phploc" 
            reportDirectory="${project.logdir}" countTests="true">
      <fileset refid="src.php.custom" />
    </phploc>
  </target>

  <!-- There is no Phing task for PHP Codesniffer in v2.4.6. It's coming for v2.5.
       Execute while we wait.-->
  <target name="phpcs"
          description="Generate checkstyle.xml using PHP_CodeSniffer">
    <phingcall target="setupgitrepo">
      <property name="repo.dir" value="${project.codedir}/drupalcs"/>
      <property name="repo.url" value="${phpcs.drupalcs.repository}" />
    </phingcall>
    <exec command="phpcs --report=checkstyle 
                         --report-file=${project.logdir}/checkstyle-codesniffer.xml 
                         --standard=${project.codedir}/drupalcs/ruleset.xml 
                         --extensions=php,inc
                         --ignore=*/contrib/*,*/*.features.*,*/*.layout.*,*/*.pages_default.*,*/*strongarm.inc
                         ${project.sitesdir}"       
          logoutput="true" />
  </target>

  <target name="site-install"
          depends="setup-phing-drush">
    <drush command="site-install" assume="yes">
      <option name="db-url">${db.url}</option>
      <param>casting</param>
    </drush>
  </target>

  <target name="coder-review"
          description="Review code using Drupal Coder module"
          depends="clean, setup-phing-drush, site-install">
    <drush command="pm-download" assume="yes">
      <!-- Currently only dev versions of Coder supports returning code review
           results in Checkstyle XML format -->
      <param>coder-${drupal.version}.x-1.x-dev</param>
    </drush>
    
    <!-- Patch Coder module to add support for piping review output.
         This is needed as there is no other way to grab the result and 
         write it to a file. -->
    <httpget url="http://86.58.184.143/coder-review-checkstyle-xml-fix.patch"
             dir="${project.sitesdir}/modules/contrib/coder"/>
    <patch patchfile="${project.sitesdir}/modules/contrib/coder/coder-review-checkstyle-xml-fix.patch" 
           dir="${project.sitesdir}/modules/contrib/coder/coder_review"
           haltonfailure="true" />
           
    <drush command="pm-enable" assume="yes">
      <param>coder_review</param>
    </drush>
    
    <!-- Get a list of modules and themes matching the project prefix.
         These are the ones we are going to review. -->
    <drush command="pm-list" pipe="projects" />
    <!-- The project list is piped through a file as this seems to be
         the only way to handle filtering of values in Phing. -->
    <delete file="${project.basedir}/build/logs/projects.txt" />
    <append text="${projects}" destFile="${project.logdir}/projects.txt" />
    <loadfile property="projects.prefix" file="${project.logdir}/projects.txt">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="^${projects.prefix}_" />
        </linecontainsregexp>
        <!-- Prefix all lines with a space. 
             We need the space as separator when we strip line breaks -->
        <prefixlines prefix=" " />
        <striplinebreaks />
      </filterchain>      
    </loadfile>
    
    <drush command="coder-review" assume="yes" pipe="xml">
      <param>no-empty</param>
      <param>xml</param>
      <param>minor</param>
      <param>comment</param>
      <param>i18n</param>
      <param>security</param>
      <param>sql</param>
      <param>style</param>
      <param>style</param>
      <!-- Review all the modules and themes matching the project prefix -->
      <param>${projects.prefix}</param>
      <!-- Review additional modules which do not match the prefix -->
      <param>${projects.custom}</param>
    </drush>
    <property name="coderreview.checkstyle.file"  value="${project.logdir}/checkstyle.xml" />
    <append destFile="${coderreview.checkstyle.file}" text="${xml}" />
    <!-- Modify Coder Review XML output to match CheckStyle XML report format
         Convert root element from coderreview to checkstyle
         Convert severities from Drupal minor/normal/critical to CheckStyle info/warning/error 
         This could probably be handled better using an XSLT. Use string replacement for now.
         Filter chains does not seem to work in append so we load the file again.-->
    <loadfile property="xml" file="${coderreview.checkstyle.file}">
      <filterchain>
        <replaceregexp>
          <regexp pattern="coderreview" replace="checkstyle" />
          <regexp pattern='severity="minor"' replace='severity="info"' />
          <regexp pattern='severity="normal"' replace='severity="warning"' />
          <regexp pattern='severity="critical"' replace='severity="error"' />
        </replaceregexp>
      </filterchain>
    </loadfile>
    <!-- Now we have transformed the content so delete the old version and save again. -->
    <delete file="${coderreview.checkstyle.file}" />
    <append destFile="${coderreview.checkstyle.file}" text="${xml}" />
  </target>

  <target name="simpletest"
          description="Run all unit tests"
          depends="clean, setup-phing-drush, site-install">
    <drush command="pm-enable" assume="yes">
      <param>simpletest</param>
    </drush>
    <drush command="test-run" assume="yes">
      <option name="all" />
      <!-- XML output requires a drush 4.5 or this patch http://drupal.org/node/1109408 -->
      <option name="xml">${project.testdir/tests</option>
    </drush>
  </target>

  <target name="phpdoc"
          description="Generate API documentation using PHPDocumentor">
    <mkdir dir="${project.buildir/api"/>
    <phpdoc title="API Documentation"
            destdir="${project.builddir}/api"
            sourcecode="php"
            output="HTML:Smarty:PHP">
      <fileset refid="src.php" />
    </phpdoc>
  </target>

  <!-- There is no Phing task for PHP CodeBrowser so do a plain execute -->
  <target name="phpcb"
          description="Aggregate tool output with PHP_CodeBrowser">
    <mkdir dir="${project.basedir}/build/code-browser"/>
    <exec command="phpcb  --log ${project.logdir} 
                          --source ${project.basedir} 
                          --output ${project.builddir}/code-browser" 
          logoutput="true" />
  </target>

  <!-- Helper task to clone a git repository if it does not exist already -->
  <target name="setup-git-repo">
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <mkdir dir="${task.dir}" />
        <!-- The gitclone task does not seem to work. Use exec instead -->
        <exec command="git clone ${repo.url} ${repo.dir}" logoutput="true" />
      </then>
    </if>
  </target>
  
  <target name="setup-phing-phploc"
          description="Generate phploc.csv using PHPLOC">
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.codedir}/phing-phploc"/>
      <property name="repo.url" value="${phing.phploc.repository}" />
    </phingcall>
    <taskdef name="phploc" classname="PHPLocTask" classpath="${project.codedir}/phing-phploc" />
  </target>

  <target name="setup-phing-drush">
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.codedir}/phing-drush"/>
      <property name="repo.url" value="${phing.drush.repository}" />
    </phingcall>
    <taskdef name="drush" classname="DrushTask" classpath="${project.codedir}/phing-drush" />
  </target>

  <!-- Main targets -->
  <target name="verify" depends="clean,
                                 lint-php-custom,
                                 lint-js-custom,
                                 lint-css-custom,
                                 check-php-debug,
                                 check-js-debug" />
                                 <!-- No simpletest for now until we figure out how to speed
                                      up tests and/or only run for custom code -->
                                 <!-- simpletest"/>-->

  <target name="analyze" depends="clean,
                                  phpmd,
                                  phpcpd,
                                  coder-review,
                                  phploc" />


  <target name="build" depends="clean,
                                verify,
                                analyze" />
                                <!-- No documentation and code browser generation for now.
                                     The processes eat up memory and build time and are largely
                                     obsolete when using GitHub -->
                                <!-- phpdoc, 
                                     phpcb"/> -->

</project>