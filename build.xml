<?xml version="1.0" encoding="UTF-8"?>

<project name="name-of-project" default="build" basedir=".">
  <!-- Set the version of Drupal for the project - 6 or 7 -->
  <property name="drupal.version" value="7" />
  <!-- Set the database url to use for site installs -->
  <property name="db.url" value="sqlite:${project.basedir}/database.sqlite" />
  <!-- Set the prefix for modules with a common prefix developed for the site -->
  <property name="projects.prefix" value="cast" />
  <!-- Set the prefix for other modules and themes developed for the site -->
  <property name="projects.custom" value="troupe " />

  <!-- Clone https://github.com/raphaelstolt/phploc-phing.git and set the value to the location -->
  <property name="phploc.dir" value="/var/lib/jenkins/phing/phploc-phing/" />
  <!-- Clone http://git.drupal.org/sandbox/mongolito404/1157574.git and set the value to the location -->
  <property name="phingdrush.dir" value="/var/lib/jenkins/phing/phing-drush-task/" />
  <!-- Clone https://github.com/ericduran/drupalcs.git and set the value to the location -->
  <property name="phpcs.standard" value="/var/lib/jenkins/phing/drupalcs/ruleset.xml" />



  <!-- Add the custom phploc task -->
  <taskdef name="phploc" classname="PHPLocTask" classpath="${phploc.dir}" />

  <!-- Add the custom drush task -->
  <taskdef name="drush" classname="DrushTask" classpath="${phingdrush.dir}" />

  <property name="project.sitesdir" value="${project.basedir}/sites/all" />
  
  <!-- Define pattern sets for future reference -->
  <patternset id="php">
    <include name="**/*.php" />
    <include name="**/*.module" />
    <include name="**/*.install" />
    <include name="**/*.profile" />
    <include name="**/*.inc" />
  </patternset>

  <patternset id="js">
    <include name="**/*.js" />
    <exclude name="**/*.min.js" />  
  </patternset>

  <patternset id="contrib">
    <exclude name="**/contrib/**/*.*" />
    <exclude name="**/libraries/**/*.*" />
  </patternset>

  <patternset id="generated">
    <exclude name="**/*.features.*" />
    <exclude name="**/*.pages_default.inc" />
    <exclude name="**/*.strongarm.inc" />
  </patternset>

  <!-- Define file sets for future reference -->
  <fileset  id="src.php" dir="${project.basedir}">
    <include name="**/*.php" />
    <include name="**/*.inc" />
  </fileset>

  <fileset dir="${project.sitesdir}" id="src.php.custom">
    <patternset refid="php"/>
    <patternset refid="contrib"/>
    <patternset refid="generated"/>
  </fileset>
  
  <fileset dir="${project.basedir}" id="src.js">
    <patternset refid="js" />
  </fileset>

  <fileset dir="${project.sitesdir}" id="src.js.custom">
    <patternset refid="js" />
    <patternset refid="contrib" />
  </fileset>
  
  <target name="clean"
          description="Clean up and create artifact directories">
    <delete dir="${project.basedir}/build"/>
    <delete dir="${project.basedir}/datsbase.sqlitr"/>
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>
    
    <mkdir dir="${project.basedir}/build"/>
    <mkdir dir="${project.basedir}/build/api"/>
    <mkdir dir="${project.basedir}/build/code-browser"/>
    <mkdir dir="${project.basedir}/build/coverage"/>
    <mkdir dir="${project.basedir}/build/logs"/>
    <mkdir dir="${project.basedir}/build/tests"/>
    <mkdir dir="${project.basedir}/build/pdepend"/>
  </target>

  <target name="checkphp"
          description="Check all PHP files for syntax errors using PHPLint">
    <phplint>
      <fileset refid="src.php" />
    </phplint>
  </target>

  <target name="checkcustomphp"
          description="Check custom PHP files for syntax errors using PHPLint">
    <phplint>
      <fileset refid="src.php.custom" />
    </phplint>
  </target>

  <target name="checkjs"
          description="Check all Javascript files using JSlint">
    <jsllint haltonfailure="true" showwarnings="true" tofile="${project.basedir}/build/logs/jslint.txt">
      <fileset refid="src.js" />
    </jsllint>
  </target>

  <target name="checkcustomjs"
          description="Check custom Javascript files using JSlint">
    <jsllint haltonfailure="true" showwarnings="true" tofile="${project.basedir}/build/logs/jslint.txt">
      <fileset refid="src.js.custom" />
    </jsllint>
  </target>
 
  <target name="checkdebugphp"
          description="Check custom PHP code for debug statements">
    <property name="php.debugfile" value="${project.basedir}/build/logs/debug_php.txt" />
    <delete file="${php.debugfile}"/>
    <append text="" destFile="${php.debugfile}"/>
    <foreach target="checkdebugphpfile" param="filename" absparam="absfilename">
      <fileset refid="src.php.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${php.debugfile}" />
    <!-- Break if debug code is detected -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="PHP debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from checkdebugphp. -->
  <target name="checkdebugphpfile">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(var_dump\(|dsm\(|dpm\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.basedir}/build/logs/debug_php.txt"/>
      </then>
    </if>
  </target>

  <target name="checkdebugjs"
          description="Check custom Javascript code for debug statements">
    <property name="js.debugfile" value="${project.basedir}/build/logs/debug_js.txt" />
    <delete file="${js.debugfile}"/>
    <append text="" destFile="${js.debugfile}"/>
    <foreach target="checkdebugjsfile" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
    <loadfile property="debuglines" file="${js.debugfile}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <fail message="Javascript debug code detected:${line.separator}${debuglines}" />
      </then>
    </if>
  </target>

  <!-- Checks an individual file for debug code. Executed from checkdebugjs. -->
  <target name="checkdebugjsfile">
    <loadfile property="debuglines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="(console\.log\()" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debuglines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}${debuglines}${line.separator}${line.separator}"
                destFile="${project.basedir}/build/logs/debug_js.txt"/>
      </then>
    </if>
  </target>

  <target name="phpunit"
          description="Run unit tests using PHPUnit and generates junit.xml and clover.xml">
    <!--<phpunit codecoverage="true">-->
    <phpunit>
      <formatter type="xml" />
    </phpunit>
  </target>

  <target name="pdepend"
          description="Generate jdepend.xml and software metrics charts using PHP_Depend">
    <phpdepend>
      <fileset refid="src.php.custom" />
      <logger type="jdepend-xml" outfile="${project.basedir}/build/logs/jdepend.xml"/>
      <logger type="jdepend-chart" outfile="${project.basedir}/build/pdepend/dependencies.svg"/>
      <logger type="overview-pyramid" outfile="${project.basedir}/build/pdepend/overview-pyramid.svg"/>
    </phpdepend>
  </target>

  <target name="phpmd"
          description="Generate pmd.xml using PHPMD">
    <phpmd>
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="${project.basedir}/build/logs/pmd.xml"/>
    </phpmd>
  </target>

  <target name="phpcpd"
          description="Generate pmd-cpd.xml using PHPCPD">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="${project.basedir}/build/logs/pmd-cpd.xml"/>
    </phpcpd>
  </target>
  
  <target name="phploc"
          description="Generate phploc.csv using PHPLOC">
    <tstamp>
      <format property="check.date.time" pattern="%Y%m%d-%H%M%S" locale="en_US"/>
    </tstamp>
    <phploc reportType="csv" 
            reportName="phploc" 
            reportDirectory="${project.basedir}/build/logs/" countTests="true">
      <fileset refid="src.php.custom"/>
    </phploc>
  </target>

  <!-- There is no Phing task for PHP Codesniffer in v2.4.6. It's coming for v2.5.
       Execute while we wait.-->
  <target name="phpcs"
          description="Generate checkstyle.xml using PHP_CodeSniffer">
    <exec command="phpcs --report=checkstyle 
                         --report-file=${project.basedir}/build/logs/checkstyle.xml 
                         --standard=${phpcs.standard} 
                         --extensions=php,inc
                         --ignore=*/contrib/*,*/*.features.*,*/*.pages_default.*,*/*strongarm.inc
                         ${project.sitesdir}"       
          logoutput="true" />
  </target>

  <target name="siteinstall">
    <drush command="site-install" assume="yes">
      <option name="db-url">${db.url}</option>
      <param>casting</param>
    </drush>
  </target>

  <target name="coderreview"
          description="Review code using Drupal Coder module"
          depends="siteinstall,clean">
    <drush command="pm-download" assume="yes">
      <!-- Currently only dev versions of Coder supports returning code review
           results in Checkstyle XML format -->
      <param>coder-${drupal.version}.x-1.x-dev</param>
    </drush>
    
    <!-- Patch Coder module to add support for piping review output.
         This is needed as there is no other way to grab the result and 
         write it to a file. -->
    <httpget url="http://drupal.org/files/issues/coder-review-drush-add-pipe-support.patch"
             dir="${project.sitesdir}/modules/contrib/coder"/>
    <patch patchfile="${project.sitesdir}/modules/contrib/coder/coder-review-drush-add-pipe-support.patch" 
           dir="${project.sitesdir}/modules/contrib/coder/coder_review"
           haltonfailure="true" />
           
    <drush command="pm-enable" assume="yes">
      <param>coder_review</param>
    </drush>
    
    <!-- Get a list of modules and themes matching the project prefix.
         These are the ones we are going to review. -->
    <drush command="pm-list" pipe="projects" />
    <!-- The project list is piped through a file as this seems to be
         the only way to handle filtering of values in Phing. -->
    <delete file="${project.basedir}/build/logs/projects.txt" />
    <append text="${projects}" destFile="${project.basedir}/build/logs/projects.txt" />
    <loadfile property="projects.prefix" file="${project.basedir}/build/logs/projects.txt">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="^${projects.prefix}_" />
        </linecontainsregexp>
        <!-- Prefix all lines with a space. 
             We need the space as separator when we strip line breaks -->
        <prefixlines prefix=" " />
        <striplinebreaks />
      </filterchain>      
    </loadfile>
    
    <drush command="coder-review" assume="yes" pipe="xml">
      <param>no-empty</param>
      <param>xml</param>
      <param>minor</param>
      <param>comment</param>
      <param>i18n</param>
      <param>security</param>
      <param>sql</param>
      <param>style</param>
      <param>style</param>
      <!-- Review all the modules and themes matching the project prefix -->
      <param>${projects.prefix}</param>
      <!-- Review additional modules which do not match the prefix -->
      <param>${projects.custom}</param>
    </drush>
    <append destFile="${project.basedir}/build/logs/coder-checkstyle.xml" text="${xml}" />
  </target>

  <target name="simpletest"
          description="Run all unit tests"
          depends="clean,siteinstall">
    <drush command="pm-enable" assume="yes">
      <param>simpletest</param>
    </drush>
    <drush command="test-run" assume="yes">
      <option name="all" />
      <!-- XML output requires a drush 4.5 or this patch http://drupal.org/node/1109408 -->
      <option name="xml">${project.basedir}/build/tests</option>
    </drush>
  </target>

  <target name="phpdoc"
          description="Generate API documentation using PHPDocumentor">
    <phpdoc title="API Documentation"
            destdir="${project.basedir}/build/api"
            sourcecode="php"
            output="HTML:Smarty:PHP">
      <fileset refid="src.php" />
    </phpdoc>
  </target>

  <!-- There is no Phing task for PHP CodeBrowser so do a plain execute -->
  <target name="phpcb"
          description="Aggregate tool output with PHP_CodeBrowser">
    <exec command="phpcb  --log ${project.basedir}/build/logs 
                          --source ${project.basedir} 
                          --output ${project.basedir}/build/code-browser" 
          logoutput="true" />
  </target>

  <target name="verify" depends="clean,
                                 checkcustomphp,
                                 checkcustomjs,
                                 checkdebugphp,
                                 checkdebugjs" />
                                 <!-- No simpletest for now until we figure out how to speed
                                      up tests and/or only run for custom code -->
                                 <!-- simpletest"/>-->

  <target name="analyze" depends="clean,
                                  pdepend,
                                  phpmd,
                                  phpcpd,
                                  phpcs,
                                  coderreview,
                                  phploc"/>


  <target name="build" depends="clean,
                                verify,
                                analyze,
                                phpdoc,
                                phpcb"/>

</project>